<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dusek Concessions Â· Kansas State FAIR 2025</title>

  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>

  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
    body { font-family: 'Inter', sans-serif; background-color: #0f172a; }
    .text-neon-green { color: #39FF14; }
    .text-neon-red { color: #FF3131; }
    .border-neon-green { border-color: #39FF14; }
    .border-neon-red { border-color: #FF3131; }
    .glow-green { text-shadow: 0 0 5px #39FF14, 0 0 10px #39FF14; }
    .glow-red { text-shadow: 0 0 5px #FF3131, 0 0 10px #FF3131; }
    .custom-scrollbar::-webkit-scrollbar { width: 8px; }
    .custom-scrollbar::-webkit-scrollbar-track { background: #334155; border-radius: 10px; }
    .custom-scrollbar::-webkit-scrollbar-thumb { background: #475569; border-radius: 10px; }
    .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #64748b; }
  </style>
</head>

<body class="text-white min-h-screen flex flex-col items-center justify-center p-4">

  <!-- Loading Spinner -->
  <div id="loading-spinner" class="fixed inset-0 flex flex-col items-center justify-center bg-gray-900 bg-opacity-70 z-50 hidden">
    <svg class="animate-spin h-10 w-10 text-cyan-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    <div id="loading-text" class="mt-4 text-lg font-bold text-gray-300">Loading...</div>
  </div>

  <!-- Firebase Config Modal -->
  <div id="config-modal" class="fixed inset-0 flex flex-col items-center justify-center bg-gray-900 bg-opacity-90 z-50 hidden p-4">
    <div class="bg-gray-800 p-8 rounded-xl shadow-2xl w-full max-w-xl text-center border-2 border-gray-700">
      <h2 class="text-3xl font-bold text-red-400 mb-4">Configuration Missing</h2>
      <p class="text-gray-400 mb-4">Paste your Firebase config JSON below, then Save.</p>
      <textarea id="config-input" class="w-full h-44 p-3 rounded-lg bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600 resize-none" placeholder='{"apiKey":"...","authDomain":"...","projectId":"...","storageBucket":"...","messagingSenderId":"...","appId":"..."}'></textarea>
      <button id="save-config-btn" class="mt-4 px-6 py-3 bg-cyan-600 text-white font-bold rounded-full shadow-lg hover:bg-cyan-700 transition">
        Save and Restart
      </button>
      <p id="config-status" class="mt-4 text-sm text-gray-400"></p>
    </div>
  </div>

  <!-- Main App Container -->
  <div id="app-container" class="bg-gray-800 p-8 rounded-xl shadow-2xl w-full max-w-4xl text-center border-2 border-gray-700 hidden">
    <h1 class="text-4xl sm:text-5xl font-extrabold text-cyan-400 mb-2 tracking-wide">
      Dusek Concessions<br/>Kansas State FAIR 2025
    </h1>
    <p class="text-gray-400 mb-6 font-mono text-sm">User ID: <span id="userIdDisplay" class="break-all">Loading...</span></p>

    <!-- Input Fields -->
    <div class="mb-6 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
      <input type="text" id="firstName" placeholder="First Name" class="w-full sm:w-1/2 p-3 rounded-xl bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600">
      <input type="text" id="lastName" placeholder="Last Name" class="w-full sm:w-1/2 p-3 rounded-xl bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600">
    </div>

    <select id="locationSelect" class="w-full p-3 rounded-xl bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600 mb-6">
      <!-- Options populated by JS -->
    </select>

    <div id="statusDiv" class="text-lg font-semibold p-4 rounded-xl mb-6 border-2 border-gray-700 shadow-inner">
      <span class="text-gray-400">Enter your name and stand to check status...</span>
    </div>

    <!-- Clock In/Out Buttons -->
    <div class="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4 mb-8">
      <button id="clockInBtn" class="w-full sm:w-1/2 px-6 py-4 bg-green-600 text-white font-bold text-xl rounded-full shadow-lg hover:bg-green-700 transition" disabled>
        Clock In
      </button>
      <button id="clockOutBtn" class="w-full sm:w-1/2 px-6 py-4 bg-red-600 text-white font-bold text-xl rounded-full shadow-lg hover:bg-red-700 transition" disabled>
        Clock Out
      </button>
    </div>

    <div class="mt-8">
      <h2 class="text-2xl font-bold text-gray-200 mb-4">Your Recent Activity</h2>
      <div id="historyList" class="space-y-4 max-h-96 overflow-y-auto pr-2 custom-scrollbar">
        <div class="text-gray-500 text-sm">Loading history...</div>
      </div>
    </div>

    <!-- Admin View Toggle -->
    <div class="mt-8 flex flex-col sm:flex-row items-center justify-center space-y-2 sm:space-y-0 sm:space-x-2">
      <input type="password" id="adminPassword" placeholder="Admin Password" class="p-2 rounded-lg bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600">
      <button id="accessAdminViewBtn" class="px-6 py-2 bg-blue-600 text-white rounded-full shadow-md hover:bg-blue-700 transition">
        Access Admin View
      </button>
    </div>

    <!-- Inline error display (for Firebase codes/messages) -->
    <div id="inlineError" class="mt-6 hidden text-sm rounded-lg border border-red-700 bg-red-900/40 p-3 text-red-200 text-left"></div>
  </div>

  <!-- Admin View Section -->
  <div id="adminView" class="bg-gray-800 p-8 rounded-xl shadow-2xl w-full max-w-4xl text-center mt-8 hidden border-2 border-gray-700">
    <h2 class="text-3xl font-bold text-cyan-400 mb-4">Admin Dashboard</h2>
    <div id="adminTablesContainer" class="space-y-8"></div>
  </div>

  <!-- Edit Modal -->
  <div id="editModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 hidden">
    <div class="bg-gray-800 p-6 rounded-xl shadow-2xl w-full max-w-lg border border-gray-700">
      <h3 class="text-2xl font-bold text-cyan-400 mb-4">Edit Entry</h3>
      <div class="space-y-4">
        <input type="hidden" id="editDocId">
        <div>
          <label class="block text-left text-gray-400 mb-1">First Name</label>
          <input type="text" id="editFirstName" class="w-full p-3 rounded-xl bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600">
        </div>
        <div>
          <label class="block text-left text-gray-400 mb-1">Last Name</label>
          <input type="text" id="editLastName" class="w-full p-3 rounded-xl bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600">
        </div>
        <div>
          <label class="block text-left text-gray-400 mb-1">Location</label>
          <select id="editLocation" class="w-full p-3 rounded-xl bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600"></select>
        </div>
        <div>
          <label class="block text-left text-gray-400 mb-1">Action</label>
          <select id="editAction" class="w-full p-3 rounded-xl bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600">
            <option value="in">Clock In</option>
            <option value="out">Clock Out</option>
          </select>
        </div>
        <div>
          <label class="block text-left text-gray-400 mb-1">Time</label>
          <input type="datetime-local" id="editTimestamp" class="w-full p-3 rounded-xl bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-cyan-400 border border-gray-600">
        </div>
      </div>
      <div class="mt-6 flex justify-end space-x-4">
        <button id="saveEditBtn" class="px-6 py-2 bg-green-600 text-white rounded-full shadow-md hover:bg-green-700 transition">Save Changes</button>
        <button id="cancelEditBtn" class="px-6 py-2 bg-gray-600 text-white rounded-full shadow-md hover:bg-gray-700 transition">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Firebase SDKs (pin to a known-good version) -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.2/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.2/firebase-auth.js";
    import { getFirestore, doc, addDoc, onSnapshot, collection, query, where, updateDoc, getDocs, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.2/firebase-firestore.js";

    setLogLevel('debug');

    // ---- Host-injected globals (optional) ----
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfigFromEnv = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
    const adminPasswordFromEnv = typeof __admin_password !== 'undefined' ? __admin_password : null;

    // ---- UI Elements ----
    const appContainer = document.getElementById('app-container');
    const configModal = document.getElementById('config-modal');
    const configInput = document.getElementById('config-input');
    const saveConfigBtn = document.getElementById('save-config-btn');
    const configStatus = document.getElementById('config-status');
    const clockInBtn = document.getElementById('clockInBtn');
    const clockOutBtn = document.getElementById('clockOutBtn');
    const statusDiv = document.getElementById('statusDiv');
    const historyList = document.getElementById('historyList');
    const userIdDisplay = document.getElementById('userIdDisplay');
    const loadingSpinner = document.getElementById('loading-spinner');
    const loadingText = document.getElementById('loading-text');
    const firstNameInput = document.getElementById('firstName');
    const lastNameInput = document.getElementById('lastName');
    const locationSelect = document.getElementById('locationSelect');
    const accessAdminViewBtn = document.getElementById('accessAdminViewBtn');
    const adminPasswordInput = document.getElementById('adminPassword');
    const adminViewContainer = document.getElementById('adminView');
    const adminTablesContainer = document.getElementById('adminTablesContainer');
    const editModal = document.getElementById('editModal');
    const editDocIdInput = document.getElementById('editDocId');
    const editFirstNameInput = document.getElementById('editFirstName');
    const editLastNameInput = document.getElementById('editLastName');
    const editLocationSelect = document.getElementById('editLocation');
    const editActionInput = document.getElementById('editAction');
    const editTimestampInput = document.getElementById('editTimestamp');
    const saveEditBtn = document.getElementById('saveEditBtn');
    const cancelEditBtn = document.getElementById('cancelEditBtn');
    const inlineError = document.getElementById('inlineError');

    // ---- Firebase State ----
    let db, auth, userId = null, isAuthReady = false;
    let unsubscribeUserHistory = null, unsubscribeAdminView = null;
    let allEvents = [], timerId = null;

    // Prefer host-injected secret; fall back to visible default (not secure).
    const ADMIN_PASSWORD = adminPasswordFromEnv || "Shitshack24";
    const publicCollectionPath = `artifacts/${appId}/public/data/time_clocks`;

    const locations = {
      1: "Rootbeer 1", 2: "Rootbeer 2", 3: "Rootbeer 3", 4: "Rootbeer 4", 5: "Blooming Onion",
      6: "Indian taco", 7: "Quesadilla", 8: "Funnel Cake", 9: "Fryshack", 10: "Smoothie Shack",
      11: "Funnel Cake Jr", 12: "Corn"
    };

    const populateLocationSelect = () => {
      let optionsHtml = '<option value="" disabled selected>Select a Location</option>';
      for (const [key, value] of Object.entries(locations)) {
        optionsHtml += `<option value="${key}">${value}</option>`;
      }
      locationSelect.innerHTML = optionsHtml;
      editLocationSelect.innerHTML = optionsHtml;
    };
    populateLocationSelect();

    // âââ Helpers âââ
    const showSpinner = () => loadingSpinner.classList.remove('hidden');
    const hideSpinner = () => loadingSpinner.classList.add('hidden');
    const updateLoadingStatus = (message) => { loadingText.textContent = message; };

    const displayMessage = (message, classes) => {
      statusDiv.innerHTML = `<span class="${classes}">${message}</span>`;
      statusDiv.className = `text-lg font-semibold p-4 rounded-xl mb-6 shadow-inner border-2 border-gray-700`;
    };

    const showInlineError = (prefix, err) => {
      const code = err?.code || err?.name || 'unknown';
      const msg  = err?.message || String(err);
      inlineError.innerHTML = `<b>${prefix}:</b> <code>${code}</code><br/><span class="opacity-80">${msg}</span>`;
      inlineError.classList.remove('hidden');
      console.error(prefix, err);
    };

    const setButtonState = () => {
      const enabled = isAuthReady && !!userId;
      clockInBtn.disabled = !enabled;
      clockOutBtn.disabled = !enabled;
    };

    const showConfigModal = () => configModal.classList.remove('hidden');

    const saveConfig = () => {
      try {
        const config = JSON.parse(configInput.value || "{}");
        if (!config || Object.keys(config).length === 0) throw new Error("Empty config");
        localStorage.setItem('firebaseConfig', JSON.stringify(config));
        configStatus.textContent = "Configuration saved! Reloading...";
        configStatus.classList.remove('text-red-400');
        configStatus.classList.add('text-green-400');
        setTimeout(() => window.location.reload(), 900);
      } catch (e) {
        configStatus.textContent = "Invalid JSON. Please check the format.";
        configStatus.classList.remove('text-green-400');
        configStatus.classList.add('text-red-400');
        console.error("Invalid config JSON:", e);
      }
    };

    // âââ Init âââ
    const initFirebase = async () => {
      showSpinner();
      updateLoadingStatus("Initializing app...");
      let firebaseConfig = {};

      if (Object.keys(firebaseConfigFromEnv).length > 0) {
        firebaseConfig = firebaseConfigFromEnv;
      } else {
        const stored = localStorage.getItem('firebaseConfig');
        if (stored) {
          try { firebaseConfig = JSON.parse(stored); } catch { localStorage.removeItem('firebaseConfig'); }
        }
      }

      if (Object.keys(firebaseConfig).length === 0) {
        updateLoadingStatus("Configuration required.");
        hideSpinner();
        showConfigModal();
        return;
      }

      try {
        const app = initializeApp(firebaseConfig);
        auth = getAuth(app);
        db = getFirestore(app);
        appContainer.classList.remove('hidden');
        configModal.classList.add('hidden');

        updateLoadingStatus("Authenticating user...");
        onAuthStateChanged(auth, (user) => {
          if (user) {
            userId = user.uid;
            userIdDisplay.textContent = userId;
            setupRealtimeListeners();
          } else {
            userId = null;
            userIdDisplay.textContent = 'Not authenticated';
            displayMessage("Please sign in.", "bg-yellow-200 text-yellow-800");
            historyList.innerHTML = '<div class="text-gray-500 text-sm">Sign in to view history.</div>';
          }
          isAuthReady = true;
          hideSpinner();
          setButtonState();
        });

        await authenticateUser();
      } catch (error) {
        showInlineError("Firebase initialization failed", error);
        hideSpinner();
      }
    };

    const authenticateUser = async () => {
      try {
        if (initialAuthToken) {
          await signInWithCustomToken(auth, initialAuthToken);
        } else {
          await signInAnonymously(auth); // Ensure Anonymous is enabled in Firebase Console
        }
      } catch (error) {
        showInlineError("Authentication failed", error);
      }
    };

    const setupRealtimeListeners = () => {
      if (!userId) return;

      const userHistoryQuery = query(
        collection(db, publicCollectionPath),
        where("userId", "==", userId)
      );

      if (unsubscribeUserHistory) unsubscribeUserHistory();
      unsubscribeUserHistory = onSnapshot(
        userHistoryQuery,
        (qs) => {
          const history = [];
          qs.forEach((docSnap) => history.push({ id: docSnap.id, ...docSnap.data() }));
          history.sort((a, b) => b.timestamp.toMillis() - a.timestamp.toMillis());
          renderHistory(history);
        },
        (error) => showInlineError("Realtime (user history) failed", error)
      );

      if (unsubscribeAdminView) unsubscribeAdminView();
      unsubscribeAdminView = onSnapshot(
        collection(db, publicCollectionPath),
        (qs) => {
          allEvents = [];
          qs.forEach((docSnap) => allEvents.push({ id: docSnap.id, ...docSnap.data() }));
          renderAdminView(allEvents);
        },
        (error) => showInlineError("Realtime (admin view) failed", error)
      );
    };

    const checkUserStatus = async () => {
      const firstName = firstNameInput.value.trim();
      const lastName  = lastNameInput.value.trim();
      const location  = parseInt(locationSelect.value, 10);

      if (!firstName || !lastName || isNaN(location)) {
        statusDiv.innerHTML = '<span class="text-gray-400">Enter your name and stand to check status...</span>';
        statusDiv.classList.remove('border-neon-green', 'border-neon-red');
        return null;
      }

      try {
        const qs = await getDocs(query(
          collection(db, publicCollectionPath),
          where("firstName", "==", firstName),
          where("lastName", "==", lastName),
          where("location", "==", location)
        ));
        const events = [];
        qs.forEach(d => events.push(d.data()));
        events.sort((a, b) => b.timestamp.toMillis() - a.timestamp.toMillis());

        const lastAction = events.length > 0 ? events[0].action : 'out';
        if (lastAction === 'in') {
          statusDiv.innerHTML = `<span class="text-green-400 glow-green">${firstName} is currently <strong>Clocked In</strong></span>`;
          statusDiv.classList.add('border-neon-green'); statusDiv.classList.remove('border-neon-red');
        } else {
          statusDiv.innerHTML = `<span class="text-neon-red glow-red">${firstName} is currently <strong>Clocked Out</strong></span>`;
          statusDiv.classList.add('border-neon-red'); statusDiv.classList.remove('border-neon-green');
        }
        return lastAction;
      } catch (error) {
        showInlineError("Error checking user status (rules/index?)", error);
        return null;
      }
    };

    const renderHistory = (history) => {
      historyList.innerHTML = '';
      if (history.length === 0) {
        historyList.innerHTML = '<div class="text-gray-500 text-sm">No clock events recorded yet.</div>';
        return;
      }
      history.forEach(event => {
        const date = new Date(event.timestamp.toMillis());
        const formatted = date.toLocaleString('en-US', {
          weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true
        });
        const color = event.action === 'in' ? 'bg-green-800' : 'bg-red-800';
        const actionText = event.action === 'in' ? 'Clocked In' : 'Clocked Out';
        const locationName = locations[event.location] || `Unknown Location ${event.location}`;

        const item = document.createElement('div');
        item.className = `${color} p-4 rounded-lg shadow-sm flex flex-col sm:flex-row justify-between items-center`;
        item.innerHTML = `
          <div class="text-left w-full sm:w-auto">
            <span class="text-gray-200 font-medium">${actionText}</span>
            <span class="text-gray-400 text-sm block sm:inline sm:ml-4">by ${event.firstName} ${event.lastName} at ${locationName}</span>
          </div>
          <span class="text-gray-300 text-sm mt-2 sm:mt-0">${formatted}</span>
        `;
        historyList.appendChild(item);
      });
    };

    const formatDuration = (ms) => {
      const seconds = Math.floor(ms / 1000);
      const minutes = Math.floor(seconds / 60);
      const hours = Math.floor(minutes / 60);
      const rm = minutes % 60, rs = seconds % 60;
      const parts = [];
      if (hours) parts.push(`${hours}h`);
      if (rm) parts.push(`${rm}m`);
      if (rs) parts.push(`${rs}s`);
      return parts.length ? parts.join(' ') : '0m 0s';
    };

    const renderAdminView = (events) => {
      adminTablesContainer.innerHTML = '';
      const byUser = {};
      events.forEach(e => {
        const key = `${e.userId}_${e.firstName}_${e.lastName}`;
        byUser[key] ??= { firstName: e.firstName, lastName: e.lastName, userId: e.userId, events: [] };
        byUser[key].events.push(e);
      });

      const sortedKeys = Object.keys(byUser).sort((a,b) => {
        const lastA = byUser[a].events.sort((x,y)=>y.timestamp.toMillis()-x.timestamp.toMillis())[0];
        const lastB = byUser[b].events.sort((x,y)=>y.timestamp.toMillis()-x.timestamp.toMillis())[0];
        return lastB.timestamp.toMillis() - lastA.timestamp.toMillis();
      });

      sortedKeys.forEach(k => {
        const u = byUser[k];
        u.events.sort((a,b)=>a.timestamp.toMillis()-b.timestamp.toMillis());

        const box = document.createElement('div');
        box.className = "bg-gray-700 p-6 rounded-lg shadow-xl border-2 border-gray-600";

        const title = document.createElement('h3');
        title.className = "text-xl font-bold text-cyan-400 mb-4 text-left";
        title.textContent = `${u.firstName} ${u.lastName}`;
        box.appendChild(title);

        const table = document.createElement('table');
        table.className = "min-w-full text-white";
        table.innerHTML = `
          <thead>
            <tr class="bg-gray-600">
              <th class="py-3 px-4 uppercase font-bold text-sm text-left">Date</th>
              <th class="py-3 px-4 uppercase font-bold text-sm text-left">Action</th>
              <th class="py-3 px-4 uppercase font-bold text-sm text-left">Location</th>
              <th class="py-3 px-4 uppercase font-bold text-sm text-left">Time</th>
              <th class="py-3 px-4 uppercase font-bold text-sm text-left">Edit</th>
            </tr>
          </thead>
          <tbody></tbody>
        `;
        const tbody = table.querySelector('tbody');

        const dailyTotals = {};
        u.events.forEach(ev => {
          const date = ev.timestamp.toDate();
          const dateStr = date.toISOString().split('T')[0];
          const loc = ev.location;
          dailyTotals[dateStr] ??= { locations: {} };
          dailyTotals[dateStr].locations[loc] ??= { in: null, out: null, pairs: [] };

          if (ev.action === 'in' && !dailyTotals[dateStr].locations[loc].in) {
            dailyTotals[dateStr].locations[loc].in = ev;
          } else if (ev.action === 'out' && dailyTotals[dateStr].locations[loc].in) {
            const L = dailyTotals[dateStr].locations[loc];
            L.out = ev; L.pairs.push([L.in, L.out]); L.in = null; L.out = null;
          } else if (ev.action === 'out' && !dailyTotals[dateStr].locations[loc].in) {
            dailyTotals[dateStr].locations[loc].pairs.push([null, ev]);
          }

          const formatted = date.toLocaleString('en-US', {
            weekday: 'short', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true
          });
          const locationName = locations[ev.location] || `Unknown Location ${ev.location}`;

          const row = document.createElement('tr');
          row.className = 'border-b border-gray-600 hover:bg-gray-600 transition-colors';
          row.innerHTML = `
            <td class="py-3 px-4 text-sm font-medium text-left">${dateStr}</td>
            <td class="py-3 px-4 text-sm text-left">${ev.action === 'in' ? 'Clock In' : 'Clock Out'}</td>
            <td class="py-3 px-4 text-sm text-left">${locationName}</td>
            <td class="py-3 px-4 text-sm text-left">${formatted}</td>
            <td class="py-3 px-4 text-sm text-left">
              <button class="edit-btn bg-gray-500 hover:bg-gray-600 text-white font-bold py-1 px-3 rounded-full" data-id="${ev.id}">Edit</button>
            </td>
          `;
          tbody.appendChild(row);
        });

        let monthlyTotalMs = 0, extraRows = '';
        Object.keys(dailyTotals).sort().forEach(dateStr => {
          let dayTotal = 0;
          Object.keys(dailyTotals[dateStr].locations).forEach(locKey => {
            const L = dailyTotals[dateStr].locations[locKey];
            let locMs = 0;
            L.pairs.forEach(([i,o]) => { if (i && o) locMs += o.timestamp.toMillis() - i.timestamp.toMillis(); });
            dayTotal += locMs;
            extraRows += `
              <tr class="bg-gray-800 text-gray-400">
                <td class="py-2 px-4 text-xs text-left" colspan="3">at ${locations[locKey] || ('Unknown Location '+locKey)}:</td>
                <td class="py-2 px-4 text-xs text-left">${formatDuration(locMs)}</td>
                <td></td>
              </tr>
            `;
          });
          monthlyTotalMs += dayTotal;
          extraRows += `
            <tr class="bg-gray-800 font-bold">
              <td class="py-3 px-4 text-sm text-left" colspan="3">Daily Total for ${dateStr}:</td>
              <td class="py-3 px-4 text-sm text-left">${formatDuration(dayTotal)}</td>
              <td></td>
            </tr>
          `;
        });

        tbody.insertAdjacentHTML('beforeend', extraRows);

        const tfoot = document.createElement('tfoot');
        tfoot.innerHTML = `
          <tr class="bg-cyan-900 font-bold text-cyan-200">
            <td class="py-3 px-4 text-lg text-left" colspan="3">Monthly Total:</td>
            <td class="py-3 px-4 text-lg text-left">${formatDuration(monthlyTotalMs)}</td>
            <td></td>
          </tr>
        `;
        table.appendChild(tfoot);

        box.appendChild(table);
        adminTablesContainer.appendChild(box);
      });
    };

    const handleClockAction = async () => {
      if (!isAuthReady || !userId) {
        displayMessage("Authentication not ready. Please wait a moment.", "bg-red-800 text-red-200");
        return;
      }
      const firstName = firstNameInput.value.trim();
      const lastName  = lastNameInput.value.trim();
      const location  = parseInt(locationSelect.value, 10);

      if (!firstName || !lastName) { displayMessage("Please enter your first and last name.", "bg-red-800 text-red-200"); return; }
      if (isNaN(location) || !locations[location]) { displayMessage("Please select a valid location.", "bg-red-800 text-red-200"); return; }

      showSpinner();
      updateLoadingStatus("Logging your clock event...");

      try {
        const lastAction  = await checkUserStatus();
        const finalAction = (lastAction === 'in') ? 'out' : 'in';
        await addDoc(collection(db, publicCollectionPath), {
          userId, firstName, lastName, location,
          timestamp: new Date(),
          action: finalAction
        });
      } catch (e) {
        showInlineError("Error saving event", e);
      } finally { hideSpinner(); }
    };

    const editEntry = (docId) => {
      const entry = allEvents.find(e => e.id === docId);
      if (!entry) return;
      editDocIdInput.value = docId;
      editFirstNameInput.value = entry.firstName || '';
      editLastNameInput.value  = entry.lastName || '';
      editLocationSelect.value = String(entry.location); // explicit cast for <select>
      editActionInput.value    = entry.action || 'in';
      const d = entry.timestamp.toDate();
      const local = new Date(d.getTime() - (d.getTimezoneOffset()*60000)).toISOString().slice(0,16);
      editTimestampInput.value = local;
      editModal.classList.remove('hidden');
    };

    const saveEditedEntry = async () => {
      const docId = editDocIdInput.value;
      const newFirst = editFirstNameInput.value.trim();
      const newLast  = editLastNameInput.value.trim();
      const newLoc   = parseInt(editLocationSelect.value, 10);
      const newAct   = editActionInput.value;
      const newTime  = new Date(editTimestampInput.value);

      if (!newFirst || !newLast || isNaN(newLoc) || !locations[newLoc] || isNaN(newTime.getTime())) {
        displayMessage("Please complete all fields correctly.", "bg-red-800 text-red-200");
        return;
      }

      try {
        showSpinner();
        updateLoadingStatus("Saving changes...");
        await updateDoc(doc(db, publicCollectionPath, docId), {
          firstName: newFirst, lastName: newLast, location: newLoc, action: newAct, timestamp: newTime
        });
        editModal.classList.add('hidden');
      } catch (error) {
        showInlineError("Error updating document", error);
      } finally { hideSpinner(); }
    };

    const cancelEdit = () => editModal.classList.add('hidden');

    const handleAdminAccess = () => {
      if (adminPasswordInput.value === ADMIN_PASSWORD) {
        adminViewContainer.classList.toggle('hidden');
        adminPasswordInput.value = '';
        accessAdminViewBtn.textContent = adminViewContainer.classList.contains('hidden') ? 'Access Admin View' : 'Hide Admin View';
      } else {
        displayMessage("Incorrect password.", "bg-red-800 text-red-200");
        adminPasswordInput.value = '';
      }
    };

    const debounceCheckStatus = () => {
      if (timerId) clearTimeout(timerId);
      timerId = setTimeout(checkUserStatus, 500);
    };

    // Events
    clockInBtn.addEventListener('click', handleClockAction);
    clockOutBtn.addEventListener('click', handleClockAction);
    accessAdminViewBtn.addEventListener('click', handleAdminAccess);
    saveConfigBtn.addEventListener('click', saveConfig);
    adminTablesContainer.addEventListener('click', (e) => {
      if (e.target.classList.contains('edit-btn')) editEntry(e.target.getAttribute('data-id'));
    });
    saveEditBtn.addEventListener('click', saveEditedEntry);
    cancelEditBtn.addEventListener('click', cancelEdit);
    firstNameInput.addEventListener('input', debounceCheckStatus);
    lastNameInput.addEventListener('input', debounceCheckStatus);
    locationSelect.addEventListener('change', debounceCheckStatus);

    // Start
    initFirebase();
  </script>
</body>
</html>
